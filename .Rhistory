shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(testData)
View(testData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(testData)
View(testData)
Q
runApp()
View(testData)
View(testData)
View(DiseaseData)
View(DiseaseData)
runApp()
View(DiseaseData)
View(DiseaseData)
runApp()
runApp()
runApp()
runApp()
model
result
runApp()
runApp()
result
runApp()
View(testData)
View(testData)
predict(model, testData)
View(DiseaseData)
View(DiseaseData)
result
result[0]
result[1]
result[2]
View(testData)
View(testData)
View(DiseaseData)
View(DiseaseData)
result
result[1]
result[2]
runApp()
result
runApp()
result
runApp()
View(testData)
View(testData)
result
runApp()
result
View(testData)
View(testData)
runApp()
runApp()
typeof(DiseaseData)
typeof(testData)
runApp()
View(testData)
View(testData)
result
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
result
runApp()
View(testData)
View(testData)
result
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
View(testData)
result
runApp()
result
result
result
runApp()
shiny::runApp()
runApp()
result
runApp()
runApp()
View(testData)
View(testData)
runApp()
View(testData)
View(testData)
result
runApp()
View(testData)
View(testData)
result
runApp()
runApp()
sapply(testData, typeof)
sapply(DiseaseData, typeof)
runApp()
result
runApp()
runApp()
result
result
View(testData)
View(testData)
runApp()
result
result
runApp()
typeof(DiseaseData)
typeof(testData)
runApp()
typeof(DiseaseData)
typeof(testData)
View(testData)
View(testData)
View(DiseaseData)
View(DiseaseData)
runApp()
runApp()
result
runApp()
runApp()
typeof(testData)
View(testData)
runApp()
runApp()
View(testData)
runApp()
View(testData)
View(DiseaseData)
View(testData)
View(testData)
runApp()
runApp()
View(testData)
esult
runApp()
View(testData)
runApp()
View(testData)
runApp()
View(testData)
View(testData)
result
shiny::runApp()
runApp()
runApp()
runApp()
View(testData)
View(DiseaseData)
str(DiseaseData)
str(testData)
View(testData)
View(testData)
View(DiseaseData)
str(testData)
runApp()
View(testData)
str(testData)
str(DiseaseData)
runApp()
View(testData)
View(DiseaseData)
View(testData)
View(testData)
result
View(testData)
result
runApp()
runApp()
result
View(testData)
View(DiseaseData)
View(DiseaseData)
library(sqldf)
db<-dbConnect(SQLite(), dbname="diseasedb")
sqldf("attach 'diseasedb' as new")
dbWriteTable(conn=db, name="Diabetes", value = "C:/Users/Akshay Pawar/Desktop/DiabetesData.csv")
dbListTables(db, diseasedb)
diabetesData <- dbReadTable(db, "Diabetes")
str(diabetesData)
namesNumeric <- c(1:8)
namesFactor <- c(9)
diabetesData[,namesNumeric] <- lapply(diabetesData[,namesNumeric], as.numeric)
diabetesData[,namesFactor] <- lapply(diabetesData[,namesFactor], as.factor)
str(diabetesData)
View(diabetesData)
diabetesData[,namesFactor] <-  as.factor(as.character(diabetesData[,namesFactor]))
View(diabetesData)
View(diabetesData)
diabetesData <- dbReadTable(db, "Diabetes")
View(diabetesData)
diabetesData[,namesNumeric] <- lapply(diabetesData[,namesNumeric], as.numeric)
diabetesData[,namesFactor] <-  as.factor(as.character(diabetesData[,namesFactor]))
View(diabetesData)
str(diabetesData)
testData <- diabetesData[sample(1:768, 1, replace = FALSE),]
str(testData)
library("e1071")
model <- naiveBayes(class~., data = diabetesData)
result <- predict(model, testData)
result
View(testData)
testData <- diabetesData[sample(1:768, 1, replace = FALSE),]
View(testData)
model <- naiveBayes(class~., data = diabetesData)
result <- predict(model, testData)
result
View(testData)
View(testData)
View(testData)
View(testData)
