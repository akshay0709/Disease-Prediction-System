{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(sqldf)\nlibrary(e1071)\n\nshinyServer(function(input, output) {\n  \n  observeEvent(input$submit,{\n    output$text <- renderText({\n      \n      age <- as.numeric(as.character(input$age))\n      sex <- as.factor(input$sex)\n      chestpaintype <- as.factor(input$chestpaintype)\n      restingbp <- as.numeric(as.character(input$restingbp))\n      cholestrol <- as.numeric(as.character(input$cholestrol))\n      fastingbloodsugar <- as.factor(input$fastingbloodsugar)\n      electrocardiographic <- as.factor(input$electrocardiographic)\n      maxheartrate<- as.numeric(as.character(input$maxheartrate))\n      exerciseangina<- as.factor(input$exerciseangina)\n      oldpeak <- as.numeric(as.character(input$oldpeak))\n      slopeofpeakexercise <- as.factor(input$slopeofpeakexercise)\n      ca <- as.factor(input$ca)\n      thal <- as.factor(input$thal)\n      num <- as.factor(0)\n      \n      #Diabetes Data Input\n      \n      pregnant <- as.numeric(as.character(input$pregnant))\n      plasma <- as.numeric(as.character(input$plasma))\n      bp <- as.numeric(as.character(input$bp))\n      tricep <- as.numeric(as.character(input$tricep))\n      insulin <- as.numeric(as.character(input$insulin))\n      bmi <- as.numeric(as.character(input$bmi))\n      pedigree<- as.numeric(as.character(input$pedigree))\n      #dbage <- as.numeric(as.character(input$dbage))\n      class <-  as.factor(0)\n      \n      \n      \n      \n      DiabetesTestData <- data.frame(\"times.pregnant\" = pregnant, \"plasma.glucose\" = plasma, \"diastolic.bp\" = bp, \"triceps.skin\" = tricep, \"serium.insuline\" = insulin, \"bmi\" = bmi, \"diabetes.pedigree\" = pedigree,\"age\" = age, \"class\" = class)\n      write.csv(DiabetesTestData, file=\"DiabetesTestData.csv\", row.names = FALSE)\n      diabetesCsvData <- read.csv(\"DiabetesTestData.csv\")\n      \n      #Code for HeartDisease\n      HeartTestData <- data.frame(\"Age\" = age, \"Sex\" = sex, \"chesp.pain.type\" = chestpaintype, \"resting.bp\" = restingbp, \"cholestrol\" = cholestrol, \"fasting.blood.sugar\" = fastingbloodsugar, \"electrocardiographic\" = electrocardiographic,\"maximum.heart.rate\" = maxheartrate, \"exercise.induced.angina\" = exerciseangina, \"oldpeak\" = oldpeak, \"slope.of.peak.exercise\" = slopeofpeakexercise, \"ca\" = ca, \"thal\" = thal, \"num\" = num)\n      write.csv(HeartTestData, file=\"hearttestData.csv\", row.names = FALSE)\n      csvTestData <- read.csv(\"hearttestData.csv\")\n      db<-dbConnect(SQLite(), dbname=\"diseasedb\")\n      sqldf(\"attach 'diseasedb' as new\")\n      \n      dbWriteTable(conn = db, name = \"Heart\", value = csvTestData , row.names= FALSE, header = FALSE, append = TRUE)\n      \n      dbWriteTable(conn = db, name = \"DiabetesData\", value = diabetesCsvData , row.names= FALSE, header = FALSE, append = TRUE)\n      HeartDiseaseData <- dbReadTable(db,\"Heart\")\n      \n      DiabetesData <- dbReadTable(db,\"DiabetesData\")\n      \n      \n      HeartDiseaseData$num[HeartDiseaseData$num > 0] <- 1\n      \n      namesFactor <- c(2:3,6:7,9,11:14)\n      HeartDiseaseData[,namesFactor] <- lapply(HeartDiseaseData[,namesFactor], as.factor)\n      namesNumeric <- c(1,4:5,8,10)\n      HeartDiseaseData[,namesNumeric] <- lapply(HeartDiseaseData[,namesNumeric], as.numeric)\n      HeartTestData <- tail(HeartDiseaseData,1)\n      Heartmodel <- naiveBayes(num~., data = HeartDiseaseData)\n      Heartresult <- predict(Heartmodel,HeartTestData)\n      \n      \n      #Diabetes\n      numericvalues <- c(1:8)\n      DiabetesData[,numericvalues] <- lapply(DiabetesData[,numericvalues], as.numeric)\n      factorValues <- c(9)\n      DiabetesData[,factorValues] <- as.factor(as.character(DiabetesData[,factorValues]))\n      \n      DiabetesTestData <- tail(DiabetesData,1)\n      \n      DiabetesModel <- naiveBayes(class~., data = DiabetesData)\n      DiabetesResult <- predict(DiabetesModel, DiabetesTestData)\n      \n      if(Heartresult ==1 && DiabetesResult== 1)\n      {\n        displayMessage <- \"There is a possibility of Heart disease and Diabetes.\"\n      }\n      else if(Heartresult == 0 && DiabetesResult == 1)\n      {\n        displayMessage <- \"There is a possibility of Diabetes.\"\n      }\n      else if(Heartresult == 1 && DiabetesResult == 0)\n      {\n        displayMessage <- \"There is a possibility of Heart disease.\"\n      }\n      else\n      {\n        displayMessage<- \"No disease present.\"\n      }\n      paste(displayMessage)\n    })\n  })\n})\n",
    "created" : 1492927803030.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3255128672",
    "id" : "854EFC5F",
    "lastKnownWriteTime" : 1494372879,
    "last_content_update" : 1494372879224,
    "path" : "~/DemoProject/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}